//Комментарии пишутся после (//). Закомментить выделенные строки Ctrl+K+C или Сtrl+/ (кн.?/).
Остановить бесконечное выполнение(зацикливание) программы можно с помощью Ctrl+C.
//рекомендован терминал "Bash". Чтобы не путаться в терминалах их можно переименовывать.
//Для загрузки в удалённый репозиторий программы C# необходимо всего 2 файла, .cs и .csproj, остальные отсеиваются файлом .gitignore (с набором внутри) в корневой дирректории.
//dotnet new gitignore - кмманда для создания .gitignore в C#. Дирректории нумеруем и называем по порядку задач, и заливаем в GitHub так же.
//Всплывающие подсказки - результат таботы расширения С#, установленного в приложениях в VScode.
//Форматировать код - ПКМ "Форматировать документ" "Format Document" Shift+Alt+F
//Перезапуск расширения C# Ctrl+Shift+P выбрать OmniSharp: Restart OmniSharp
//string res = Method4(10, "z");  А можно взять символ z, который для нас сейчас является строкой! Сергей Камянецкий. Лучшее, в Фоннд золотых цитат!

//Console — команда, позволяющая работать с термин. Соответственно, будут какие-то данные вносить/выводить, путём ввода напрямую в терминале.
//WriteLine. Сonsole.WriteLine(""); - ком, оператор, выв текст в термин и ставит курсор на новую строку, текст, пишется в круглых скобках и двойных кавычках ("").
//Write. Сonsole.Write(""); - почти то же самое, но в одной строке, может появиться артефакт в виде символа "%".
//ReаdLine. string username = Console.ReadLine(); - считывание данных, но эти дан нужно где-то сохр, созд некий контейнер(коробку), куда можн полож знач, введ польз, нужна 
//переменная!, а для перемен необход указ тип(!тип данных), из-за выд объём занимаемой памяти, имена перем всегд с !маленькой буквы.
//Console.Clear(); - отчистка консоли, ещё работает просто clear

string username = Console.ReadLine(); string - если данные, которые вводим, строки.
string result = String.Empty; // String.Empty значение пустой строки для понимания кода программистами, возможно ""
string s = “qwerty” //если требуется обратиться к конкретному символу строки, мы можем это делать, начиная отсчитывать позицию символов с 0. То есть «q» — это 0, «w» — 1
012345
s[3] // r  //!!!получается строка  - это массив!!
if(text[i] ==oldValue) result + $”{NewValue}”;
else result + $”{str[i]}”;

//int num = int.Parse(Console.ReadLine()); int - тип данных, тип переменной для целых чисел (целое число).
//double - контейнер для работы с вещественными числами, дробные числа с остатком.
//bool - тип данных Истина или Ложь.
bool Multiplicity(int a1, int b1)  //наконец-то применение типа данных BOOL
{
    return a1 % b1 == 0;
}

bool result = Multiplicity(num1, num2);
if (result) Console.WriteLine($"Число {num1} кратно {num2}"); //if (result) = true
else Console.WriteLine($"Число {num1} не кратно {num2}, остаток от деления {num1 % num2}");

int sum = default;  //значение по умолчанию '0'

{
int i; //когда так объявляем i, тоже равно 0
for (i = 0; n1 > 0; i++)

// Переименовать переменну во всей программе ПКМ на переменной "Rename Symbol" F2
// return DateTime.Now.Year; //достать год, тип метода 3

//char cимвольный тип, условный тип данных

//username.ToLower() - оператор применяется к переменной, все символы в строке переводит в нижний регистр. !!! Учесть референсное значение не "Маша", а "маша".
//% - логическая опреация как умножение или деление, фиксирует остаток от деления.
//int what = new Random().Next(0, 3); //0 1 2   new Random().Next(min, max) - "хочу случайное число в диапазоне от Мин до Макс-1", генератор случ чис от Мин до Макс-1. !Само знач Макуимума не входит.

 Random rnd = new Random(); //вывод ген сл ч из цикла для предотвр только 0 или только 1 или др.
    for (int i = 0; i < count; i++)
    {
        // array[i] = new Random().Next(0, 2);
        array[i] = rnd.Next(0, 2); //использование новой переменной и типа Рандом
    }

//&&. if (num1 < 1000 && num1 >99) -логическое И. Две вертикальные черты || - логическое или. 
//!= не равенство
// dist = Math.Round(dist, 2, MidpointRounding.ToZero); Округление до 2 значения после запятой без учёта 3ей цифры после запятой

// if( УСЛОВИЕ ) 
// {
// Набор действий 1
// }
// else
// {
// Набор действий 2
// }
//если числа окажутся одинаковыми, не проверяет на равенство, выдаст одно из
if(text[i] == oldValue) result = result + $"{newValue}";  //упрощщённый, сокращщённый пример if и else
else result = result + $"{text[i]}";
if (array[j] < array[minPosition]) minPosition = j; //ещё пример

// while(ЦИКЛ. УСЛОВИЕ ПРОДОЛЖЕНИЯ) /Существует цикл do-while
// {
// Набор действий
// }
// int count = 0;
// while( count < 100)
// {
// Набор действий
// count = count + 1
// }

// for (int i = 1; i <= num; i++) //цикл for при наборе квадратом выберется шаблон
// {
// sum += i; //sum = sum + i;
// }
// return sum;




//Console.SetCursorPosition(10, 4); - для рисования, отступ от Левого и Верхнего края терминала.
//Дальше даём наименование нашему контейнеру (имя переменной или идентификатора).Назовём username.
//формируем приглашение пользователя ко вводу.
// Console.SetCursorPosition(10, 4); //Для рисования, отступ от Левого и Верхнего края терминала
// Console.WriteLine("+"); //морской бой, ставим "+"на 10.4
//count = count + 1, count =+1, count++ (Инкримент, count-- (уменьш на 1) Декримент), count = count + 2 так же count +=2 */

//int - обяв тип перемен; num - назвали; Console.ReаdLine() - комманда для получ ввода от польз строки!; int.Parse() - преобр строку в числ int, подобно Convert.ToInt32()   !! Оптимизация кода, получение числа от пользователя в строку и конвертация этой строки в число может оказаться лишним действием если мы не выполняем с числом никаких операций и вычислений, можно использовать тип string.
//int num = int.Parse(Console.ReadLine());
//int num = Convert.ToInt32(Console.ReadLine());
//Console.Write($"Квадрат {num} равен {square}"); //Интерполяция строк
//Console.Write("Квадрат "+num+" равен "+square); //Конкотинация строк
// Console.Write(result); // и так тоже выводит

Функции
ВозвращаемыйТипДанных ИмяМетода([ТипДанных1 ИмяАргумента1, ... ])
{
Тело Метода
return ЗначениеСоответствующееВозвращаемомуТипуДанных;
}

Не использовать в теле метода объявленные, глобальные переменные, иначе не сможем использовать его повторно с другими переменными, потеря универсальности.

Не помещать метод в строку вывода, стоит вложить в переменную - правило хорошего кода. Не делать матрёшку в матрёшке.

nt max1 = Math.Max(8, 8); //Встроенный метод нахождения максимального, ниже мы описали аналог

f(x) = x 2 +1
double f(double x)
{
double result = x * x + 1;
return result           //возвращение result
}

double f(double x)
{
result x * x + 1;
}

void Method2(string msg))
// Method21("Текст", 4); //для методов 2 типа (что-то принимают, ничего не возвращают)
// Method21(msg: "Текст",count: 4); //можем явно указывать какому аргументу какое значение мы хотим присвоить
Method21(count: 4, msg: "Текст"); //не обязательно писать по порядку

Массив
ТИП ДАННЫХ[] ИМЯ = {Значение1,Значение2, ...}
int[] array = { 9, 28, 1, 32, 1990 }
int[] array = { 0, 0, 0, 0, 0 }
int[] array = new int[5];
int[] array = new int[]{ 0, 0, 0, 0, 0 }
int[] array = new int[5]{ 1, 0, 2, 0, 3 }

//определяем массив
//               0   1   2   3   4   5   6   7   8
int[] array = { 11, 211 ,31, 41, 15, 61, 17, 18, 19 }; //тип данных, имя, значение

//array[0] = 12;  нулевому элементу массива присвоить значение 12
//Console.WriteLine(array[4]); получить значение по индексу
//int n = array.Length; Length - возвращает длину, ко-во элементов массива
//break;  остановит поиск, находит первый элемент, совпадение
// int position = -1; // в случае не нахождения значения выдавался индекс 0 - первого элемента, а это ошибка? принято -1 - не найдено

Имеется одномерный массив array из n элементов, требуется найти элемент массива, равный find
1. Установить счетчик index в позицию 0
2. Если array [index] = find, алгоритм завершил работу успешно.
3. Увеличить index на 1
4. Если index < n, то перейти к шагу 2. В противном случае алгоритм завершил работу безуспешно.

while (index < n)
{
    if (array[index] == find)
    {
        Console.WriteLine(index);
        break;           //остановит поиск, находит первый элемент, совпадение
    }
    index++;
}

Math.Sqrt(x); - найдёт квадратный корень из числа Х, возвращает тип double - стоит общащать внимание на используемые функции у них разные типы возвращаемых данных.

Console.WriteLine($"|{count1}-{count1 * count1,3}|"); //три знака длина строки на вывод! Выравнивание таблицы вывода.

// Дмитрий Будяков обратить внимание на толкового коллегу с приятным голосом! sem04ex02 Задача 26: Напишите программу,
// которая принимает на вход число и выдаёт количество цифр в числе.
